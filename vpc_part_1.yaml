AWSTemplateFormatVersion: 2010-09-09
Description: This Template Creates a VPC with 2 Public and 2 Private Subnets, Security groups and Bastion Instance.

### DEFINE PARAMETERS ###

Parameters: 
  #  VPC Parameters
  VPCCidrBlock: 
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.0.0/16
    Description: VPC CIDR Block (eg 10.0.0.0/16)
    Type: String

  AvailabilityZone1:
    Description: The AvailabilityZone to use for the first subnet
    Type: AWS::EC2::AvailabilityZone::Name
  AvailabilityZone2:
    Description: The AvailabilityZone to use for the second subnet
    Type: AWS::EC2::AvailabilityZone::Name
    
  PubSubCIDR1:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.1.0/24
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String
  PubSubCIDR2:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.2.0/24
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String  

  PrivSubCIDR1:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.11.0/24
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String
  PrivSubCIDR2:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Default: 10.0.12.0/24
    Description: VPC CIDR Block for the Public Subnet (eg 10.0.0.0/24)
    Type: String

  # Bastion Instance Parameters
  SSHKeyName:
    Description: 'Name of the EC2-key you need to use for Bastion Instance'
    Type: 'AWS::EC2::KeyPair::KeyName'
    Default: ""
  SSHLocation:
    Description: must be a valid IP CIDR range of the form x.x.x.x/x.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
  InstanceType: 
    Description: Choose a valid Instance Type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.micro, t2.small, t2.medium]    

## Mappings ###
Mappings: 
  RegionMap:
    us-east-1:
      HVM64: ami-04d29b6f966df1537
    us-east-2:
      HVM64: ami-09558250a3419e7d0

###  RESOURCES ###

Resources: 
  # VPC
  myVPC: 
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCCidrBlock
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'  
      InstanceTenancy: 'default' #  or dedicated
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName

  # Public Subnets
  PublicSubnet1: 
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ '0', !GetAZs ]
      CidrBlock: !Ref PubSubCIDR1
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value: PublicSubnet1
  PublicSubnet2: 
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ '1', !GetAZs ]    
      CidrBlock: !Ref PubSubCIDR2
      MapPublicIpOnLaunch: 'true'
      Tags:
      - Key: Name
        Value: PublicSubnet2

  # Private Subnets
  PrivateSubnet1: 
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ '0', !GetAZs ]
      CidrBlock: !Ref PrivSubCIDR1
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PrivateSubnet1
  PrivateSubnet2: 
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref myVPC
      AvailabilityZone: !Select [ '1', !GetAZs ]
      CidrBlock: !Ref PrivSubCIDR2
      MapPublicIpOnLaunch: false
      Tags:
      - Key: Name
        Value: PrivateSubnet2

  # Internet Gateway 
  InternetGateway: 
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: Internet-Gw
        - Key: Network
          Value: PublicInternet
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref myVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Route Table 
  PublicRouteTable:         
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: PublicRT                
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation: 
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  # NAT Gateway 
  NatGateway: 
    Type: "AWS::EC2::NatGateway"
    DependsOn: NatPublicIP
    Properties:
      Tags:
        - Key: Name
          Value: Nat-Gw
        - Key: Network
          Value: PrivateInternet     
      AllocationId: !GetAtt NatPublicIP.AllocationId
      SubnetId: !Ref PublicSubnet1
  NatPublicIP: 
    Type: "AWS::EC2::EIP"
    DependsOn: myVPC
    Properties:
      Domain: vpc

  # Private Route Table 
  PrivateRouteTable: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref myVPC
      Tags:
        - Key: Name
          Value: PrivateRT           
  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  PrivateSubnet1RouteTableAssociation:  
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable
  PrivateSubnet2RouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable

  # Security Group for Bastion Host
  BastionSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow SSH to  Web Server Security Group"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref SSHLocation
      Tags:
      - Key: Name
        Value: Bastion-sg        

  # ELB Security Group for ALB 
  ELBSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP and HTTPS to everywhere"
      VpcId: !Ref myVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: Alb-sg

  # Web Server Security Group for WordPress Instance
  WebServerSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow http to ALB sec group, 3306 to RDS database sec group, ssh to bastion sec group"
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: Wordpress-sg
  MySecGroupIngressSSH:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref WebServerSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !Ref BastionSecurityGroup
  MySecGroupIngressHTTP:  
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref WebServerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !Ref ELBSecurityGroup
  MySecGroupIngressRDS: 
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref WebServerSecurityGroup  
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref RDSSecurityGroup

  # RDS Security Group
  RDSSecurityGroup: 
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow port 3306 to Web Servers Security Group"
      VpcId: !Ref myVPC
      Tags:
      - Key: Name
        Value: Rds-sg      
  MySecurityGrpIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RDSSecurityGroup
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref WebServerSecurityGroup

  # Bastion Instance
  EC2BastionInstance:   
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]  
      InstanceType: !Ref InstanceType
      KeyName: !Ref SSHKeyName
      SubnetId: !Ref PublicSubnet2
      SecurityGroupIds: 
      - !Ref BastionSecurityGroup
      Tags:
      - Key: Name
        Value: Bastion-Instance

### OUTPUTS ###

Outputs:
  MyVPC:
    Description: "MyVPC ID"
    Value: !Ref myVPC
    Export:
      Name: !Sub "${AWS::StackName}-MyVPCID"
  PrivateSubnet1:
    Description: " Private Subnet AZ1"
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet1ID"
  PrivateSubnet2:
    Description: "Private Subnet AZ2"
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PrivateSubnet2ID"    
  PubicSubnet1:
    Description: " Public Subnet AZ1"
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${AWS::StackName}-PubicSubnet1ID"    
  PubicSubnet2:
    Description: " Public Subnet AZ2"
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${AWS::StackName}-PubicSubnet2ID"    
  BastionSecurityGroup: 
    Description: "Bastion Instance's Security Group"
    Value: !Ref BastionSecurityGroup
    Export: 
      Name: !Sub "${AWS::StackName}-BastionSecurityGroupID"  
  ELBSecurityGroup:
    Description: "ELB Security Group"
    Value: !Ref ELBSecurityGroup
    Export: 
      Name: !Sub "${AWS::StackName}-ELBSecurityGroupID"
  WebServerSecurityGroup:
    Description: "WordPress Web Server's Security Group"
    Value: !Ref WebServerSecurityGroup
    Export: 
      Name: !Sub "${AWS::StackName}-WebServerSecurityGroupID"
  RDSSecurityGroup:
    Description: "RDS Security Group"
    Value: !Ref RDSSecurityGroup
    Export: 
      Name: !Sub "${AWS::StackName}-RDSSecurityGroupID"
  EC2BastionInstance:
      Description: "Bastion Instance ID"
      Value: !Ref EC2BastionInstance      